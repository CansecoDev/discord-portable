// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Discord.lnk (1.9kB)
// res/pinned_update.json (12.56kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _discordLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x68\x23\x65\x18\xc7\x7f\x69\x2b\xda\x93\x11\x43\xa0\x55\x49\xaa\xa6\x08\x3a\x93\x8f\xa6\x21\x4d\x51\x5a\xf3\x61\x4a\x12\x1a\x12\x62\x43\x1d\xa5\xe3\x64\xa0\x43\x1b\x32\x9d\x49\xa1\xad\x78\xf4\x52\x2c\x08\x1e\x0c\x58\x69\x11\x41\x29\x78\x10\x3c\x08\x8a\x78\xf0\x2c\x3d\x54\xf1\x68\x2b\x82\x14\x41\x41\x3c\xd5\x65\x97\x79\x33\x29\x9b\xb4\xcb\x1e\xf6\xb4\xcb\xfe\x87\x79\xbf\x9e\xff\xfb\x7f\x3e\x12\x9e\x29\x02\x1e\xdf\x10\x0e\x7e\x10\x23\xb9\x9b\x73\x10\x04\xfe\xb9\xf1\xdf\xc5\xd0\xda\x89\xe7\x1b\xff\xdb\xa3\xc3\x6b\x27\x9e\xde\x1e\x17\x97\x0b\x17\x7f\xe0\x23\x50\xfe\x6d\xf1\x38\x78\x9e\x32\xbc\x9f\xfe\xfa\x18\x2f\x46\x22\x9f\x8c\x11\x4e\xa7\x14\xae\xe2\x75\xa2\x62\x5e\x2a\x2d\x77\xbc\x64\x0c\x5b\x6b\x59\x0d\xe6\x18\x65\x84\xbf\xbf\x5f\x2a\xbd\xda\x71\x2c\x32\x50\x7f\xce\xe1\xbd\x35\x70\x7f\xf9\xf1\x80\x27\x83\x81\x8d\x46\x0b\x8b\x06\xe0\x67\x85\x98\xab\x5a\xef\x04\xa9\x99\x0d\xb5\xad\xcb\xfa\x96\x0e\xb9\x4b\xe5\x7a\xc7\x79\x1d\xe5\xa3\x09\x87\xbb\x3f\xd2\xaf\xec\x7d\xc5\xe7\xa9\x61\xd2\x40\xa5\x8d\x8e\x8c\xce\x16\x3a\x30\x0e\x38\x25\x7b\xda\x4d\xdf\x99\xa7\xdd\x5b\x05\x60\x0c\x18\x06\x12\xaf\xfd\x3e\xe2\x05\x32\xc6\xf3\x1b\x9b\x7a\x30\x4d\x3a\xa5\xb8\x19\x2a\xb7\xc7\x34\x41\x7f\x06\x41\x24\x82\xac\xd2\xa6\x8d\x89\x4d\x8a\x30\x61\x1a\x7d\x1c\x15\x13\x13\x59\xec\x9b\x84\x79\x0a\x19\x19\xa5\x6f\xec\x57\x55\xb8\x2e\x1b\x3f\x69\x52\xd7\x70\xbb\xfa\x12\x11\x64\xf1\x4e\x11\x21\xca\x38\x12\x12\x26\x16\x2d\x34\x74\x6c\x6c\xaa\xb4\x51\xb1\x68\x13\x1c\x50\xe9\xf9\x78\xc9\xf5\x51\xc3\x46\xc7\xc2\x46\x41\xc3\x42\x65\x87\x6d\x14\xe6\x85\xaf\x8c\x88\x4c\x45\xa1\x28\xd4\x55\xd6\xef\x18\x97\x8c\x21\xce\x7c\xc3\xf0\x28\x1c\x86\x6a\xd5\x6c\xa5\x5c\x59\xcc\x2d\x14\xb3\x21\x65\xde\x34\x33\x6a\x5b\x55\x8a\x2d\x4d\x5d\xbf\xac\xb8\x6a\x9a\xb2\xa1\xb5\xae\xf9\x0f\x3e\x18\x08\x51\xa3\x4a\x96\x0a\x65\x2a\x2c\x92\x63\x81\x22\x59\x42\xf7\x54\xe1\x87\xb8\xdf\xb0\xd2\xed\x3e\x87\x75\x77\xaf\x59\xea\xce\xb6\x64\x6a\x3d\xfb\xbe\xfd\xec\xc5\x8f\x67\x6f\x16\x8e\x3e\x4a\x4c\xce\x9e\x97\x0f\x62\xef\x7e\x3c\x5e\xfa\xe5\xcf\x27\xde\xfb\x20\xb3\xfb\x46\xf3\xeb\xbf\xee\x66\x9f\xf5\xc0\x28\x1c\xee\x01\xd1\x6a\xb9\x7a\xb6\x5b\xcf\x7d\x57\x4c\xa6\xbf\xfd\xff\xc9\x0f\x27\x3b\xcd\x9f\x36\x00\xd1\x4a\x03\x40\x18\xa8\x22\x11\x45\x62\x1a\x89\x98\x58\x4d\x89\x76\x92\x60\x8a\x24\x51\x62\xc4\x89\x21\x11\x27\x22\x9e\xa4\xb0\xc4\x49\x08\x6e\x94\x38\x49\x62\x24\x89\x10\x13\xcf\x8c\x38\x8d\x88\x86\xd4\x83\xe1\x06\x53\x7b\xa1\x78\xb0\x7d\x30\x53\xf8\xe2\xf8\xf4\x44\x3a\xfd\xf9\xdf\x12\xf0\x48\x2f\x98\x67\x9c\x6a\x88\x7e\x29\x63\xb3\xc1\x26\x06\x16\x16\x3a\xeb\xc8\x57\x7a\xd7\xe0\x57\xa5\x8b\x19\xd7\xd1\x57\xfe\x66\xe6\xcb\x3d\x33\xff\x79\x7e\x4e\xfe\xec\xe5\xad\xf7\x1d\xed\x55\x87\x90\x77\xca\xff\x4e\x21\xdf\xa5\x97\x03\x83\x3f\xcf\xad\x00\x00\x00\xff\xff\x6e\xf0\xe7\x2c\x6c\x07\x00\x00")

func discordLnkBytes() ([]byte, error) {
	return bindataRead(
		_discordLnk,
		"Discord.lnk",
	)
}

func discordLnk() (*asset, error) {
	bytes, err := discordLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Discord.lnk", size: 1900, mode: os.FileMode(0666), modTime: time.Unix(1540321391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x6c, 0x22, 0x76, 0x62, 0x29, 0xe1, 0xa8, 0x19, 0xde, 0xc6, 0x8e, 0xf1, 0x2e, 0x96, 0x78, 0xe6, 0x7f, 0xf, 0xe9, 0x3d, 0x65, 0xdd, 0x53, 0xae, 0x61, 0x66, 0xdf, 0xc4, 0x70, 0x21, 0x68}}
	return a, nil
}

var _pinned_updateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9b\xdd\x6e\x1c\xb7\x92\x80\xef\xfd\x14\x82\xae\x17\x56\xb1\xfe\x2b\xaf\x72\x10\x18\x2c\x56\x31\x16\xac\x58\x5a\x49\xce\xee\xc1\x41\xde\x7d\x31\x8e\xad\x8c\x1c\x27\x31\xb4\x19\x44\xd1\x9d\x28\xce\xb0\x9b\x5f\x7f\x5d\x5d\x2c\xf6\xfc\xe7\xd5\xd9\xd9\xf9\x8f\xd7\xf5\xe1\xaa\xef\xce\xbf\x3b\x3b\x34\xcf\xce\xce\xeb\xf2\x6e\x5d\xdf\xd6\x9b\xea\xbb\x77\xf7\xd7\x37\x6f\xd6\xf5\x6d\x3f\xf4\x9e\x9d\x9d\xef\x0f\x57\x57\x47\xed\xb3\xb3\xf3\xb7\xd7\x77\xf7\x6f\x7e\xea\xdb\xbb\xcb\xeb\xf7\xe7\xdf\x9d\xfd\xeb\xa1\xe7\xec\x6c\xfc\xd7\x51\x03\x8e\x1b\x01\x40\x0f\xcd\xef\x7f\xed\xf9\x74\x42\x47\xe3\x1d\x8d\x71\x7e\x33\xd7\xbb\xf9\x43\xbf\xb9\x7b\x3b\x51\xf4\xfc\xbb\xb3\x73\x0f\xc6\xf6\x80\xbd\x72\xa0\xbb\x20\x85\x18\x68\xef\xe5\xc3\xda\x81\xd8\x4a\x93\xcc\x89\x88\x56\x79\x68\x62\xa8\x01\x61\x2d\x31\x88\xf3\xa3\xd1\x3f\xdc\x1e\x66\x76\xfe\xf6\xfe\xfe\xe6\xee\xbb\x8b\x8b\xba\x7a\xfd\x09\xc6\xbc\xb9\x79\xfd\xbe\xef\x2f\xea\xf2\xee\xfe\xf6\xfa\x62\xde\xdc\x5c\xdc\xdd\xcf\xbc\xea\x8b\xff\xb9\x7c\x7f\xf1\xbf\xae\x17\xe3\x35\xbc\x3e\x4c\xe9\xe2\x6b\xf8\x2e\xc6\xc5\x81\xda\xeb\x5f\xbe\x7e\xfe\xe9\x80\x3f\x7f\x3e\xf2\x79\xf5\xd5\xfd\xbc\x7b\x84\xee\x3f\x47\xa8\xfe\x08\xf0\x17\x88\xbf\x80\xfc\x11\x33\x1e\xfd\xe3\xfb\xe3\xde\xdf\xa2\xe6\x47\xdd\xbf\x85\x9d\xb3\xa3\xb2\x38\x0b\x9b\xda\xb8\xd9\xa6\x0f\x20\x1c\xa4\x55\xa5\x09\x1a\x0a\xab\xb9\xb6\x35\xd6\x64\x9e\x5a\xb2\xca\x19\xc8\xa1\xf1\xfc\xd1\xf8\xa7\xc4\x7d\x7b\xfd\xe3\xe7\x0f\xe1\x05\x9f\x3f\x1c\xf6\xe7\x4f\x7f\x7d\xff\xea\xe8\x12\x3c\x38\xff\xe5\xcd\xf0\xfc\x74\x2f\x66\xf6\x2a\xeb\x24\xad\x45\xed\x13\x6d\x5a\x80\x71\x51\x91\x94\xcc\x88\x4e\xe1\x70\x06\x31\x9b\x3a\x57\xa7\xcf\x5c\x59\x48\x94\x7a\x2a\xdd\x3f\x91\xfb\xc7\x98\x3e\xfe\xc4\x74\xd9\xa1\x52\x33\x60\x00\x4f\x42\x0a\x65\xeb\x52\xb4\xae\x39\x55\x88\x97\x41\xad\x54\x8c\x6c\xc9\x0e\x36\x08\x25\xb0\x5c\xd1\x96\x31\x4e\x67\xfa\x11\xe9\x47\x92\x8f\x6f\x95\xfc\xae\xdf\xdd\x5e\xde\x3f\x67\xc7\x09\x2b\x44\x33\x07\x79\xb1\x6c\x9d\x11\x9c\xad\x42\x8e\xcc\xb3\x6d\x68\x48\xec\xe5\x25\x9c\xfb\x70\x0f\x08\x80\x53\xc3\xae\xcd\xd3\xea\x54\x8e\xff\x02\xee\xc5\x28\xbe\x4d\x30\x80\xb2\xb7\x06\xd6\x5c\x42\x73\x8b\x37\xa6\x77\xc1\x42\x73\xa7\xf4\x86\x85\x4c\x06\x5b\x27\x05\xd5\x42\xdf\x8c\x88\xcb\x96\x9c\x4e\xf1\x5f\x41\x3f\xcd\xf0\x77\xb7\x97\x77\x37\xcf\x58\xf0\x43\xec\xc6\x59\xee\x62\xe1\x81\xe1\x2d\xe9\xed\x93\xa4\x8a\xd7\x98\x3a\x5d\xd4\xa7\xea\x36\x58\x66\xa5\xa2\xd3\xe6\x02\x8d\x16\xb0\x0d\xa7\x12\xfc\x23\xb7\x17\xe3\xb7\x4b\x1d\x9e\x8c\x61\xb4\x68\x2d\x71\xa5\x61\x81\x39\x34\xc6\x0e\xe5\x39\x8a\x82\x9c\x71\xf9\x94\x6d\x9a\x93\x1a\x06\x6e\x96\x19\x43\x1c\xf5\x74\x7e\x3f\x70\x7e\x9a\xde\x3f\x5d\xfe\x70\x79\x35\xdf\xdf\x3f\xe7\xb4\x3c\x63\xa6\x07\xea\xf0\x39\xa8\x0a\x14\xb3\xa1\xe7\x86\x11\x94\xbb\xd8\x5b\xa9\xf7\xc4\x16\x51\xb0\x08\x2f\x5d\x39\x0c\x90\x63\x2c\x56\x39\x95\xe2\x0f\xec\x5e\x8c\xe6\x05\x15\x04\x1c\x4d\x4e\x6c\x8e\x92\xc9\x24\x4e\xb3\x18\xb6\x97\x4c\xac\x80\xed\x48\x6c\x9d\xc6\x6b\xa9\xf8\xdc\x36\x16\x66\x84\xf9\x3c\x9d\xe6\x8f\x58\x3f\x4d\xf5\x1f\xe6\x8f\xfd\xe6\xc3\xfd\xe5\xd5\xb3\xce\xc9\xa9\x31\xc6\x1e\x1d\xbc\x92\xac\x33\xbd\x56\xab\xb7\xdb\x48\x02\x33\x8f\xd8\x3d\xb6\x05\xc2\x34\xdd\xb0\xb8\x75\xe7\xd2\x20\xcb\xa4\x79\x2a\xd7\x7f\x85\xf7\x62\x64\x47\xcc\x9e\x63\xb6\xd6\xb0\x98\xe2\x3e\x0f\x8f\xc5\x94\xb5\xbd\xd4\x7d\x69\x41\x70\xcc\x1e\x0e\x52\xbd\x62\xcd\x04\x8c\xb1\xd6\x36\xaf\xb1\xec\x74\xb2\x3f\x86\xfd\x34\xdb\x6f\x6f\xd6\x33\xd6\xbc\x37\xe4\x1c\xcb\x04\x15\x43\x4b\x0a\xdc\x37\x0b\x73\xe4\xee\x43\x94\x1f\xb8\x02\x07\x88\x4a\xd4\x62\x07\x90\x39\xd1\x60\x17\x15\xe0\x3a\x59\x48\xbf\xbd\x59\x2f\xc6\x6f\x46\xe1\xd1\xe4\x26\x48\x4e\x14\x39\x9d\x0a\x16\x97\x05\x2e\x60\x9d\xda\x61\x46\x32\x79\x6c\xc3\x99\xba\x6b\xb2\x63\x81\xa9\xa2\x7a\x9f\xce\xef\x4f\x94\x9f\xb8\xe4\xbc\xe9\xab\xab\xf5\xb6\xd7\xbb\xbf\xd5\x6f\xfc\xe3\x94\x65\x8f\xa0\xa9\x89\x23\xc0\x1c\x73\x04\xd2\x21\x17\x0f\x13\x21\x86\x60\x8d\x55\x0c\x53\xbd\x75\xa3\xfa\x1c\x52\xa9\x0e\x2c\xd2\x63\x43\x9f\x6c\xd9\xf9\x00\xef\x02\xff\x4e\xcd\xe9\xaf\xd3\xdc\x04\x6d\x2f\x41\x2b\x9f\x32\x06\xce\x55\x93\x8c\x4c\x7a\xc3\x2c\x5a\xe4\x50\x4b\xa3\x66\x96\xc2\x26\x03\x90\x3d\xd1\x62\x51\x0c\x57\x3d\x61\xce\xf2\x18\xf6\x91\xed\xf4\xed\xb6\xff\xd8\x75\x39\x9f\x71\x20\x47\xe2\xc4\xc3\xca\x9e\x79\x1d\x98\xfb\x21\x7b\x1c\x25\xe2\x9a\xb0\x36\xae\xc1\xa8\x02\x32\x3d\xa6\x57\x77\xca\x52\x22\x9d\x36\x2a\x27\xe1\x3e\x59\x0d\xf1\xc0\xed\xc5\x84\x72\x5c\x2a\xac\x21\xcb\x92\x3d\x50\x76\xf2\x50\x0d\xe6\x58\xb6\x27\x3a\x11\xca\x8a\x89\x24\xf1\x91\x30\x93\x98\x8e\xe1\x36\x2c\x2b\xc7\x09\x6b\xe5\x0f\x9c\x9f\x16\xcc\xd7\xd5\xf5\x87\xba\xfb\xf7\xfb\xe7\x9c\xab\x54\x02\x2f\x98\x6a\x20\x1a\x83\x36\xd8\xaa\xe8\x6c\x0f\x92\x18\x64\xa6\x3d\x32\x01\xda\x1a\x4d\x7c\x33\xdb\xde\x83\x01\x74\x70\x0d\x39\x59\x2c\x7f\x60\xf7\x62\x34\xe7\x74\xf4\x1a\x32\x22\xc8\xd9\x47\xef\xd6\x34\x1d\xab\xda\x7c\xec\x45\x99\xe6\x34\x61\xba\x6c\xdf\x6a\x15\xd6\x43\x64\xf3\xf6\x85\xb0\xfd\x74\x9a\x3f\x62\xfd\xc4\x4a\xcb\xf5\xe5\xfa\x7b\xab\x2c\xf4\x87\x9a\x6f\x6d\x24\x60\x86\x51\xdb\x7b\xad\x60\xb4\x16\x19\x38\x95\x90\x13\x21\xbd\x9c\x24\xd9\x62\xd8\x50\x5e\x33\xa2\x72\xdb\xa0\x51\x30\xf9\x74\x55\x96\x03\xb7\x0b\xfa\x87\x64\x2b\xf8\x27\x8a\x43\xd3\xe0\xed\x73\xc6\x48\x80\x89\x83\x12\x64\xe7\x18\x30\x41\xac\xdd\x4a\x25\x08\x40\x0e\x17\x41\xb3\x61\xe4\x36\xb6\xd6\x91\x59\xee\x70\xc2\x0a\xcb\x67\xce\x8f\x12\x15\xfc\x56\xbd\xaf\x7f\xea\xdb\xab\xf9\x6f\x7c\xc6\x81\x5c\x01\x76\x74\x6c\x47\x01\xdc\x6d\x66\x12\xc0\xcb\x96\x98\x33\x33\x12\x35\x42\x58\x36\x52\xfb\xf6\x79\xe8\xab\x11\x3b\x93\xc6\x36\xc7\x53\x19\xfe\x19\xdd\x8b\x89\xe3\xa3\x14\x77\x4d\x0d\x2a\x93\xbd\x70\x77\xfb\xac\x05\x39\x23\x2b\x5b\x81\x07\xfa\xe6\x84\x99\x61\x54\x73\x6d\x99\x34\x15\x62\x48\x6c\x75\x3e\x9d\xe4\xc7\xa8\x9f\x16\xc6\xdf\x5e\x5f\xff\xbd\x0b\xcf\x3f\x76\xdc\x82\x63\x61\xd5\x1e\x07\xc9\x61\x8f\x44\x67\xcc\x08\xa2\x1a\x4c\xbe\x15\x6c\x67\x0f\x01\x5d\xb5\xba\x57\xe7\x42\x77\x08\x9d\x1d\x3a\x4f\xe6\xf8\x01\xdb\x3f\xc6\x6f\xfa\xb3\x32\x79\x93\xa6\xc5\x86\x1d\xcc\xae\xc8\xb9\x1a\x27\xd9\x92\x19\x92\x7b\xa9\x93\x6d\x5c\xe9\x2b\x35\x52\x8d\xb9\x4c\x25\x0e\x4b\xa1\x66\x9d\x74\x3a\xbf\x3f\x63\x7e\xe4\x36\x7d\xab\xdb\x7d\x7b\x75\x98\xec\x33\xd6\x1b\x04\x5c\x51\x47\xe1\x42\xe9\x02\xdd\xd0\x94\x89\xcc\xc1\x0a\xa3\x96\x83\xba\xaa\xba\xe1\xb6\x45\x73\x27\x65\x6d\x6e\x1f\xab\xc4\xe9\x64\x49\xca\x27\x72\xff\x18\xc3\xff\xb4\xa8\x42\xcc\x3d\xc1\x28\xc2\x03\x79\xae\x4d\x92\x0d\xbc\x76\xd2\x66\xcc\x95\x55\x63\xcd\xa5\x39\x9a\x8c\x55\x58\x92\x61\x09\x66\x99\x3a\xd6\xe9\x0c\x3f\x22\xfd\xb4\x00\xfe\xdc\x77\x80\x56\xb3\x0a\xf4\x4e\xd6\x5c\x1b\x06\x5b\x22\xaf\xb9\x24\x16\x95\xc5\x62\xb5\x88\x43\xea\x62\xa3\xe2\x90\xad\x6c\xad\x88\x46\x28\xee\x0d\x9a\xa7\x52\xfc\x65\x6d\xfe\xac\x34\x15\x98\xb4\xcd\xbc\xe7\x9e\x38\x7d\xc0\x9e\xe2\xc9\xa2\x6d\xd1\xb3\x74\x4f\x59\x5e\xc6\x8b\xf6\xee\x01\x13\x31\x79\x20\xab\x0b\x9c\x50\xf0\xff\xe7\xbe\x4f\x5d\xde\xdd\xcc\xfb\xf5\xf6\x19\x1b\x0e\x89\xc5\x9b\x30\x37\x21\x86\xd4\x6e\x5d\x64\xb2\x4a\xd6\xd2\xd5\x04\x26\xb1\x3a\x15\x72\x2e\x77\xc9\x49\xd8\x87\xf5\xa6\x6b\xb5\x02\x9e\x2c\x47\xf9\x8c\xee\xc5\x48\xae\x87\xc8\xc1\x01\x92\x51\x11\x87\x04\xa5\x04\x07\x4a\x26\xa4\x36\x0b\x8b\x92\x57\x70\x4f\x27\x19\x56\x6b\x48\xe5\xd8\x81\x3e\x0c\x64\xac\x13\xbe\x62\x7b\x84\xfa\x1b\x3d\x7f\xf5\xe9\x12\x3c\xb6\xf9\xf7\x60\x3f\xa0\x79\x00\xfc\x60\xef\x27\xa8\x5f\x7b\xea\x59\x9a\xc1\x60\x36\x8d\x76\x58\x3a\xd3\xb9\x9d\x42\x0d\x43\xdd\x76\x61\xd9\xd2\xb1\xa5\x9c\x85\x3a\x6b\x16\x32\xeb\xc6\xdd\xd8\xe3\x73\xa5\xef\x2f\x21\xf5\x85\x81\xbf\x4c\xfd\x0b\xf3\x1e\x6e\xf0\xdf\x35\xee\xc8\x90\x23\xd3\x8e\x2c\x7b\x30\xec\x6b\x55\x67\xe8\xe1\x84\xce\x99\xfd\x51\x08\xdf\x23\x63\x73\x23\x8d\xdd\x25\xe6\x34\xd6\x4a\xc6\xe5\xb2\xdb\x79\x1b\x79\xe8\xf0\xcd\xb1\x79\xf3\xaf\xe5\xb8\xbf\x06\xc8\xb1\x27\xe7\x0f\x4e\x7c\x9c\xc0\xf9\x6d\xff\xf7\x87\xcb\xdb\x3e\x7e\xeb\xfa\x5f\x5f\xc4\xc5\xe3\x9f\x20\xfc\x4e\xde\xfb\xfb\x3b\x8d\x5f\xcd\x21\xbe\x5a\xe0\x3b\x9c\xd2\xab\x9f\x5f\xfd\x5f\x00\x00\x00\xff\xff\xf6\xe4\x1d\x53\x10\x31\x00\x00")

func pinned_updateJsonBytes() ([]byte, error) {
	return bindataRead(
		_pinned_updateJson,
		"pinned_update.json",
	)
}

func pinned_updateJson() (*asset, error) {
	bytes, err := pinned_updateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pinned_update.json", size: 12560, mode: os.FileMode(0666), modTime: time.Unix(1635286120, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x52, 0xde, 0x9c, 0x63, 0xc0, 0x9c, 0xf7, 0x8c, 0x63, 0x34, 0x55, 0x78, 0x3d, 0xf, 0xca, 0x21, 0xa, 0x42, 0xee, 0x37, 0x4a, 0xd2, 0xd6, 0x4d, 0xbe, 0x8e, 0x71, 0x59, 0x34, 0xa1, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Discord.lnk":        discordLnk,
	"pinned_update.json": pinned_updateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Discord.lnk": {discordLnk, map[string]*bintree{}},
	"pinned_update.json": {pinned_updateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
